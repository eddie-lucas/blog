import{_ as a,X as s,Y as n,a1 as e}from"./framework-ca66ca40.js";const p="/blog/assets/image-20230425163423742-aff66efe.png",o="/blog/assets/image-20230425163433465-194bec5d.png",t="/blog/assets/image-20230425163448534-8aa0f4e9.png",r={},l=e(`<h1 id="安装kafka" tabindex="-1"><a class="header-anchor" href="#安装kafka" aria-hidden="true">#</a> 安装kafka</h1><blockquote><ol><li>首先安装jdk，zookeeper，kafka</li></ol></blockquote><p>将压缩包放进linux目录<code>/opt/mySoftware</code>下，并依次执行下面的命令</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>tar <span class="token operator">-</span>zxvf jdk<span class="token operator">-</span><span class="token number">8</span>u361<span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz
tar <span class="token operator">-</span>zxvf zookeeper<span class="token operator">-</span><span class="token number">3.4</span><span class="token number">.12</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz
tar <span class="token operator">-</span>zxvf kafka_2<span class="token punctuation">.</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token number">.0</span><span class="token punctuation">.</span>tgz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解压后会生成文件夹<code>jdk1.8.0_361\`\`kafka_2.11-2.0.0</code> <code> zookeeper-3.4.12</code></p><blockquote><ol start="2"><li>配置环境变量</li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>vim <span class="token operator">/</span>etc<span class="token operator">/</span>profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后到文件最下方，添加下面的内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># jdk</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/mySoftware/jdk1.8.0_361
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">\${JAVA_HOME}</span>/jre
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">\${JAVA_HOME}</span>/lib:<span class="token variable">\${JRE_HOME}</span>/lib
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">\${JAVA_HOME}</span>/bin:<span class="token environment constant">$PATH</span>
<span class="token comment"># zookeeper</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/opt/mySoftware/zookeeper-3.4.12
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin
<span class="token comment"># kafka</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HOME</span><span class="token operator">=</span>/opt/mySoftware/kafka_2.11-2.0.0
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$KAFKA_HOME</span>/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加完成后保存并退出，然后执行命令使配置生效</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>source <span class="token operator">/</span>etc<span class="token operator">/</span>profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>验证是否成功</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span>version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>切换目录，创建<code>tmp</code>目录，打开配置目录，修改zookeeper配置文件名字</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cd <span class="token operator">/</span>opt<span class="token operator">/</span>mySoftware<span class="token operator">/</span>zookeeper<span class="token operator">-</span><span class="token number">3.4</span><span class="token number">.12</span>
mkdir tmp
cd conf
cp zoo_sample<span class="token punctuation">.</span>cfg zoo<span class="token punctuation">.</span>cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开<code>zoo.cfg</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>vim zoo<span class="token punctuation">.</span>cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改/添加以下内容后，保存退出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 数据目录
dataDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>mySoftware<span class="token operator">/</span>zookeeper<span class="token operator">-</span><span class="token number">3.4</span><span class="token number">.12</span><span class="token operator">/</span>tmp<span class="token operator">/</span>data
# 日志目录
dataLogDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>mySoftware<span class="token operator">/</span>zookeeper<span class="token operator">-</span><span class="token number">3.4</span><span class="token number">.12</span><span class="token operator">/</span>tmp<span class="token operator">/</span>log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>创建zookeeper服务器编号</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cd <span class="token operator">/</span>opt<span class="token operator">/</span>mySoftware<span class="token operator">/</span>zookeeper<span class="token operator">-</span><span class="token number">3.4</span><span class="token number">.12</span><span class="token operator">/</span>tmp
mkdir data
touch <span class="token operator">/</span>opt<span class="token operator">/</span>mySoftware<span class="token operator">/</span>zookeeper<span class="token operator">-</span><span class="token number">3.4</span><span class="token number">.12</span><span class="token operator">/</span>tmp<span class="token operator">/</span>data<span class="token operator">/</span>myid
vim <span class="token operator">/</span>opt<span class="token operator">/</span>mySoftware<span class="token operator">/</span>zookeeper<span class="token operator">-</span><span class="token number">3.4</span><span class="token number">.12</span><span class="token operator">/</span>tmp<span class="token operator">/</span>data<span class="token operator">/</span>myid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在myid文件中添加一个数字0</p><blockquote><p>启动zookeeper</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>zkServer<span class="token punctuation">.</span>sh start　　启动服务
zkServer<span class="token punctuation">.</span>sh status　　查看服务状态
zkServer<span class="token punctuation">.</span>sh stop　　停止服务
zkCli<span class="token punctuation">.</span>sh　　客户端连接
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>然后修改kafka的server.properties</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cd <span class="token operator">/</span>opt<span class="token operator">/</span>mySoftware<span class="token operator">/</span>kafka_2<span class="token punctuation">.</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token number">.0</span><span class="token operator">/</span>config
vim server<span class="token punctuation">.</span>properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改这些内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># broker的编号，如果集群中有多个broker，则每个broker的编号需要设置的不同
broker<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">0</span>
# broker对外提供的服务入口地址，下面的ip是虚拟机的ip
listeners<span class="token operator">=</span><span class="token constant">PLAINTEXT</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.162</span><span class="token number">.124</span><span class="token operator">:</span><span class="token number">9092</span>
# 存放消息日志文件的地址
log<span class="token punctuation">.</span>dirs<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>kafka<span class="token operator">-</span>logs
# <span class="token class-name">Kafka</span>所需的<span class="token class-name">ZooKeeper</span>集群地址，为了方便演示，我们假设<span class="token class-name">Kafka</span>和<span class="token class-name">ZooKeeper</span>都安装在本机
zookeeper<span class="token punctuation">.</span>connect<span class="token operator">=</span>localhost<span class="token operator">:</span><span class="token number">2181</span><span class="token operator">/</span>kafka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动kafka</p></blockquote><p>在<code>/opt/mySoftware/kafka_2.11-2.0.0</code>目录下执行下面的命令</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 前台启动
bin<span class="token operator">/</span>kafka<span class="token operator">-</span>server<span class="token operator">-</span>start<span class="token punctuation">.</span>sh config<span class="token operator">/</span>server<span class="token punctuation">.</span>properties
# 后台启动
bin<span class="token operator">/</span>kafka<span class="token operator">-</span>server<span class="token operator">-</span>start<span class="token punctuation">.</span>sh config<span class="token operator">/</span>server<span class="token punctuation">.</span>properties <span class="token operator">&amp;</span>
<span class="token comment">//关闭后台运行</span>
bin<span class="token operator">/</span>kafka<span class="token operator">-</span>server<span class="token operator">-</span>stop<span class="token punctuation">.</span>sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h1><p>生产者：Producer，发送消息的一方，将消息发送给kafka</p><p>broker：翻译过来是经纪人，代理人，通常情况下将它看作kafka实例</p><p>消费者：Consumer，接收消息的一方，从kafka上拉取消息</p><p>主题：Topic，kafka中，消息依据主题进行分类，生产者将消息发送到特定的主题，消费者从特定的主题接收消息</p><p><strong>分区</strong>：<strong>一个主题可以分为多个分区，一个分区只能属于一个主题</strong>。同一个主题下不同分区的消息是不同的，分区在存储层面可以看作一个可追加的日志，消息在追加到分区时会分配一个偏移量offset，offset是消息在分区中的唯一标识，kafka根据offset来保证消息在分区内的顺序性。offset不跨越分区，也就是说消息在分区内是有序的而不是主题有序的 <img src="`+p+'" alt="image-20230425163423742" loading="lazy"><strong>分区多副本机制</strong>：在分区中，有多个副本，保存的是相同的消息，副本之间是一主多从的关系，leader副本负责处理读写请求，follower副本只负责和leader保持同步，副本处于不同的broker，当一个leader出现故障，会从follower中重新选出leader对外提供服务，这样就保证了在某个broker失效时仍然能保证服务可用 <img src="'+o+'" alt="image-20230425163433465" loading="lazy"> 不仅broker会失效，consumer也会发生故障宕机，消费端也是具有一定的容灾能力的，当consummer拉取消息时，会保存拉取消息的位置（从哪里拉取的消息)，当重新恢复后，会根据之前保存的位置重新拉取进行消费</p><p>AR,ISR,OSR：包括leader和follower在内的所有副本叫做AR（all），所有和leader保持一定程度同步的副本（包含leader）叫做ISR（in），与leader同步滞后过多的副本组成OSR（out），AR=ISR+OSR，正常情况下AR=ISR，即所有副本的同步程度都比较好，leader负责跟踪和维护这两个集合，如果ISR中的副本滞后过多就移除，如果OSR同步追上则加入到ISR，当leader故障重选leader时，只能在ISR中选</p><p>LSO，HW，LEO：HW是高水位，在这个标志之前的消息是可以被消费者拉取的，HW及之后的消息对消费者不可见 <img src="'+t+'" alt="image-20230425163448534" loading="lazy"> 几个例子： <img src="https://cdn.nlark.com/yuque/0/2023/png/29372805/1678501521333-4d901378-1c38-4f80-aeb0-c2ff38f9cc18.png#averageHue=%23f7f7f7&amp;clientId=u5acf7c11-2d6f-4&amp;from=paste&amp;height=451&amp;id=uc1906e1b&amp;name=image.png&amp;originHeight=564&amp;originWidth=1150&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=275058&amp;status=done&amp;style=none&amp;taskId=u73e9b5f4-3323-4530-831e-85a79c89a0e&amp;title=&amp;width=920" alt="image.png" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2023/png/29372805/1678501556817-b10f7e74-3b2f-4d1b-ac18-2cb2b9490bd3.png#averageHue=%23f8f8f8&amp;clientId=u5acf7c11-2d6f-4&amp;from=paste&amp;height=350&amp;id=u195aa674&amp;name=image.png&amp;originHeight=437&amp;originWidth=1105&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=163262&amp;status=done&amp;style=none&amp;taskId=ua967502e-4b44-4757-a12e-067cb937bed&amp;title=&amp;width=884" alt="image.png" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2023/png/29372805/1678501574667-86b1b2c9-1472-4258-b096-820eb902fe9c.png#averageHue=%23f5f5f5&amp;clientId=u5acf7c11-2d6f-4&amp;from=paste&amp;height=414&amp;id=u54fe6fbd&amp;name=image.png&amp;originHeight=518&amp;originWidth=1113&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=276469&amp;status=done&amp;style=none&amp;taskId=u45215016-e254-47ac-9a7b-967c0d86904&amp;title=&amp;width=890.4" alt="image.png" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2023/png/29372805/1678501587899-661976fd-555d-49bf-b8ba-d3a255150dee.png#averageHue=%23f6f6f6&amp;clientId=u5acf7c11-2d6f-4&amp;from=paste&amp;height=372&amp;id=u495e05eb&amp;name=image.png&amp;originHeight=465&amp;originWidth=1107&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=213521&amp;status=done&amp;style=none&amp;taskId=ube7b3dc7-a6c1-4040-8ab3-6135a6831e8&amp;title=&amp;width=885.6" alt="image.png" loading="lazy"> kafka的复制机制是介于同步复制和异步复制之间的一种均衡的状态，如果是同步复制，只有所有的follower都拷贝了leader的消息副本，这条消息才算发送成功，这种情况，效率很低；如果是单纯的异步复制，则当leader写入了消息就认为发送成功，如果follower还没来得及拷贝，leader就宕机，就会造成数据丢失</p><p><code>fdsf</code></p>',40),i=[l];function c(d,m){return s(),n("div",null,i)}const u=a(r,[["render",c],["__file","kafka.html.vue"]]);export{u as default};
